/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define DVORAK_LAYER 0
#define RUSSIAN_LAYER 1
#define NUM_LAYER 2
#define FUNCT_LAYER 3
#define F_KEYS_LAYER 4
#define SYMBOLS_1_LAYER 5
#define SYMBOLS_2_LAYER 6
#define ARROWS_LAYER 7
#define BT_LAYER 8

//#define PRT_SCR LG(LS(S))

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "ru_keys.h"


&mt {
	tapping-term-ms = <200>;
	flavor = "tap-preferred";
	};

&lt {
	tapping-term-ms = <300>;
};

&sl {
        release-after-ms = <2000>;
};

/ {
        macros {
        mv_to_layer: mv_to_layer {
                compatible = "zmk,behavior-macro-one-param";
                #binding-cells = <1>;
                bindings
                        = <&macro_press &kp LCTRL>
                        , <&macro_tap &kp LSHFT>
                        , <&macro_release &kp LCTRL>
                        , <&macro_param_1to1>
                        , <&macro_tap &to MACRO_PLACEHOLDER>
                        ;
        };

        mv_to_dvorak: mv_to_dvorak {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                        = <&macro_press &kp LCTRL>
                        , <&macro_tap &kp N0>
                        , <&macro_release &kp LCTRL>
                        , <&macro_tap &to DVORAK_LAYER>
                        ;
        };

        mv_to_russian: mv_to_russian {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                        = <&macro_press &kp LCTRL>
                        , <&macro_tap &kp N1>
                        , <&macro_release &kp LCTRL>
                        , <&macro_tap &to RUSSIAN_LAYER>
                        ;
        };

        mv_from_russian: mv_from_russian {
                compatible = "zmk,behavior-macro-one-param";
                #binding-cells = <1>;
                bindings
                        = <&macro_press &kp LCTRL>
                        , <&macro_tap &kp N0>
                        , <&macro_release &kp LCTRL>
                        , <&macro_param_1to1>
                        , <&macro_press &mo MACRO_PLACEHOLDER>
                        , <&macro_pause_for_release>
                        , <&macro_param_1to1>
                        , <&macro_release &mo MACRO_PLACEHOLDER>
                        , <&macro_press &kp LCTRL>
                        , <&macro_tap &kp N1>
                        , <&macro_release &kp LCTRL>
                        ;
        };

        highlight_word: highlight_word {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                        = <&macro_press &kp LCTRL>
                        , <&macro_tap &kp LEFT_ARROW>
                        , <&macro_press &kp LSHFT>
                        , <&macro_tap &kp RIGHT_ARROW>
                        , <&macro_release &kp LSHFT>
                        , <&macro_release &kp LCTRL>
                        ;
        };

        highlight_row: highlight_row {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                        = <&macro_tap &kp HOME>
                        , <&macro_press &kp LSHFT>
                        , <&macro_tap &kp END>
                        , <&macro_release &kp LSHFT>
                        ;
        };
};

        behaviors {
                macros_from_rus_lt: macros_from_rus_lt {
                        compatible = "zmk,behavior-hold-tap";
                        #binding-cells = <2>;
                        flavor = "tap-preferred";
                        tapping-term-ms = <300>;
                        quick-tap-ms = <200>;
                        bindings = <&mv_from_russian>, <&kp>;
                };
                
                macros_to_dvorak_tap: macros_to_dvorak_tap {
                        compatible = "zmk,behavior-hold-tap";
                        #binding-cells = <2>;
                        flavor = "tap-preferred";
                        tapping-term-ms = <300>;
                        quick-tap-ms = <200>;
                        bindings = <&mv_to_dvorak>, <&kp>;
                };

                macros_to_russian_tap: macros_to_russian_tap {
                        compatible = "zmk,behavior-hold-tap";
                        #binding-cells = <2>;
                        flavor = "tap-preferred";
                        tapping-term-ms = <300>;
                        quick-tap-ms = <200>;
                        bindings = <&mv_to_russian>, <&kp>;
                };

                td_mt_ru_zh_h: td_mt_ru_zh_h {
                        compatible = "zmk,behavior-tap-dance";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&mt LS(RU_ZH) RU_ZH>, <&mt LS(RU_H) RU_H>;
                };

                td_mt_ru_z_tvz: td_mt_ru_z_tvz {
                        compatible = "zmk,behavior-tap-dance";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&mt LS(RU_Z) RU_Z>, <&mt LS(RU_TVZN) RU_TVZN>;
                };

                td_comma_semicolon: td_double_kp {
                        compatible = "zmk,behavior-tap-dance";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp COMMA>, <&kp SEMICOLON>;
                };

                td_sym_layers: td_sym_layers {
                        compatible = "zmk,behavior-tap-dance";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&lt SYMBOLS_1_LAYER TAB>, <&lt SYMBOLS_2_LAYER TAB>;
                };

                td_sym_layers_from_rus: td_sym_layers_from_rus {
                        compatible = "zmk,behavior-tap-dance";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&macros_from_rus_lt SYMBOLS_1_LAYER TAB>, <&macros_from_rus_lt SYMBOLS_2_LAYER TAB>;
                };

                td_home_hword: td_home_hword {
                        compatible = "zmk,behavior-tap-dance";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp HOME>, <&highlight_word>;
                };

                td_end_hrow: td_end_hrow {
                        compatible = "zmk,behavior-tap-dance";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp END>, <&highlight_row>;
                };
        };

        combos {
                compatible = "zmk,combos";
                combo_bt_layer {
                        timeout-ms = <50>;
                        key-positions = <37 40>;
                        bindings = <&sl BT_LAYER>;
                };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |   |		'		|		, 	 |		.	  |	 P		p |	 Y		 y |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// |   |	A		a	|	O	   o |	E		e |	 U		u |	 I		 i |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// |   |		;		|	Q	   q |	J	    j |	 K		k |	 X		 x |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
//p                    							| GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &none  &kp SQT 		 &kp COMMA 	  &kp DOT 	   &mt LS(P) P  &mt LS(Y) Y		&mt LS(F) F  &mt LS(G) G   &mt LS(C) C  &mt LS(R) R  &mt LS(L) L  &none
   &none  &mt LS(A) A 	 &mt LS(O) O  &mt LS(E) E  &mt LS(U) U  &mt LS(I) I		&mt LS(D) D  &mt LS(H) H   &mt LS(T) T  &mt LS(N) N  &mt LS(S) S  &none
   &none  &kp SEMICOLON  &mt LS(Q) Q  &mt LS(J) J  &mt LS(K) K  &mt LS(X) X   	&mt LS(B) B  &mt LS(M) M   &mt LS(W) W  &mt LS(V) V  &mt LS(Z) Z  &none
         &macros_to_russian_tap RUSSIAN_LAYER  BACKSPACE  &lt NUM_LAYER  SPACE  &lt FUNCT_LAYER DEL     &td_sym_layers  &lt ARROWS_LAYER SPACE  &lt F_KEYS_LAYER ENTER
                        >;
                };
                russian_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &none    &mt LS(RU_YE) RU_YE  &mt LS(RU_TSE) RU_TSE  &mt LS(RU_Y) RU_Y  &mt LS(RU_K) RU_K   &mt LS(RU_E) RU_E   &mt LS(RU_N) RU_N   &mt LS(RU_G) RU_G   &mt LS(RU_SH) RU_SH &mt LS(RU_SHb) RU_SHb    &td_mt_ru_z_tvz &none
   &none &mt LS(RU_F) RU_F &mt LS(RU_bl) RU_bl &mt LS(RU_V) RU_V &mt LS(RU_A) RU_A &mt LS(RU_P) RU_P   &mt LS(RU_R) RU_R &mt LS(RU_O) RU_O &mt LS(RU_L) RU_L &mt LS(RU_D) RU_D &td_mt_ru_zh_h &none
   &none  &mt LS(RU_YA) RU_YA       &mt LS(RU_CH) RU_CH       &mt LS(RU_C) RU_C       &mt LS(RU_M) RU_M       &mt LS(RU_I) RU_I         &mt LS(RU_T) RU_T   &mt LS(RU_B) RU_b   &mt LS(RU_B) RU_B &mt LS(RU_YU) RU_YU    &mt LS(RU_AE) RU_AE &none
                &macros_to_dvorak_tap DVORAK_LAYER BACKSPACE     &macros_from_rus_lt NUM_LAYER  SPACE      &macros_from_rus_lt FUNCT_LAYER DEL      &td_sym_layers_from_rus  &macros_from_rus_lt ARROWS_LAYER SPACE   &macros_from_rus_lt F_KEYS_LAYER ENTER
                        >;
                };

		num_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &none &none &none &none &none &none   	&kp EQUAL &kp N7  &kp N8 &kp N9 &kp ASTERISK &none
   &none &none &none &none &none &none      &kp MINUS &kp N4 &kp N5  &kp N6 &kp SLASH &none
   &none &none &none &none &none &none      &kp PLUS &kp N1  &kp N2  &kp N3 &none &none
                        &none &trans   &none   &none   &kp N0    &none
                        >;
                };

		functional_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &none &none &none &none &none &none   	&kp LC(Y) &td_home_hword  &td_end_hrow &kp CAPS &kp ESC &none
   &none &none &none &none &none &none      &kp LC(Z) &kp LC(C) &kp LC(V)  &kp LC(X) &none &none
   &none &none &none &none &none &none      &caps_word &kp PAGE_UP  &kp PAGE_DOWN  &kp INSERT &none &none
                        &none &none   &none   &none   &none    &none
                        >;
                };

		f_keys_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &none &kp F4 &kp F3 &kp F2 &kp F1 &kp LG(LS(S))   	&none &none  &none &none &none &none
   &none &kp F8 &kp F7 &kp F6 &kp F5 &kp LA(TAB)      &none &none &none  &none &none &none
   &none &kp F12 &kp F11 &kp F10 &kp F9 &none      &none &none  &none  &none &none &none
                        &none &none   &none   &none   &none    &none
                        >;
                };

		symbols_1_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &none &kp EXCL &kp LPAR &kp RPAR &kp LBKT &kp RBKT   	&none &none  &none &none &none &none
   &none &kp AT_SIGN &kp BACKSLASH &kp UNDERSCORE &kp SQT &kp PERCENT      &none &none &none  &none &none &none
   &none &kp SEMICOLON &kp HASH &kp DOT &none &none     &none &none  &none  &none &none &none
                        &none   &none  &none  &none    &none &none
                        >;
                };

                symbols_2_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &none &kp QMARK &none &none &kp LBRC &kp RBRC   	&none &none  &none &none &none &none
   &none &kp TILDE &kp PIPE &none &kp DQT &kp AMPERSAND      &none &none &none  &none &none &none
   &none &kp COLON &none &kp COMMA &none &none      &none &none  &none  &none &none &none
                        &none   &none   &none   &none    &none &none
                        >;
                };

		arrows_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &none &none &none &kp UP_ARROW &none &none   	&none &none  &none &none &none &none
   &none &none &kp LEFT_ARROW &kp DOWN_ARROW &kp RIGHT_ARROW &none      &none &none &none  &none &none &none
   &none &none &none &none &none &none      &none &none  &none  &none &none &none
                        &none &none   &none   &none   &none    &none
                        >;
                };

                bluetooth_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &none &none &bt BT_CLR &bt BT_DISC &none &none   	&none &none  &none &none &none &none
   &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4      &none &none &none  &none &none &none
   &none &none &none &none &none &none      &none &none  &none  &none &none &none
                        &none &none   &none   &none   &none    &none
                        >;
                };
        };
};
