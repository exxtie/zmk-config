/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define DVORAK_LAYER 0
#define RUSSIAN_LAYER 1
#define NUM_LAYER 2
#define FUNCT_LAYER 3
#define F_KEYS_LAYER 4
#define SYMBOLS_LAYER 5
#define ARROWS_LAYER 6

//#define PRT_SCR LG(LS(S))

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "ru_keys.h"


&mt {
	tapping-term-ms = <300>;
};

&lt {
	tapping-term-ms = <300>;
};

/ {
		macros {
		mv_to_layer: mv_to_layer {
			compatible = "zmk,behavior-macro-one-param";
			#binding-cells = <1>;
			bindings
				= <&macro_press &kp LCTRL>
				, <&macro_tap &kp LSHFT>
				, <&macro_release &kp LCTRL>
				, <&macro_param_1to1>
				, <&macro_tap &to MACRO_PLACEHOLDER>
				;
		};
	};

		behaviors {
			macros_tap: macros_tap {
				compatible = "zmk,behavior-hold-tap";
				#binding-cells = <2>;
				flavor = "tap-preferred";
				tapping-term-ms = <400>;
				quick-tap-ms = <200>;
				bindings = <&mv_to_layer>, <&kp>;
			};
		};

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |   |		'		|		, 	 |		.	  |	 P		p |	 Y		 y |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// |   |	A		a	|	O	   o |	E		e |	 U		u |	 I		 i |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// |   |		;		|	Q	   q |	J	    j |	 K		k |	 X		 x |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
//                    							| GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &none  &kp SQT 		 &kp COMMA 	  &kp DOT 	   &mt LS(P) P  &mt LS(Y) Y		&mt LS(F) F  &mt LS(G) G   &mt LS(C) C  &mt LS(R) R  &mt LS(L) L  &none
   &none  &mt LS(A) A 	 &mt LS(O) O  &mt LS(E) E  &mt LS(U) U  &mt LS(I) I		&mt LS(D) D  &mt LS(H) H   &mt LS(T) T  &mt LS(N) N  &mt LS(S) S  &none
   &none  &kp SEMICOLON  &mt LS(Q) Q  &mt LS(J) J  &mt LS(K) K  &mt LS(X) X   	&mt LS(B) B  &mt LS(M) M   &mt LS(W) W  &mt LS(V) V  &mt LS(Z) Z  &none
         &macros_tap RUSSIAN_LAYER DEL  &lt NUM_LAYER  BACKSPACE  &lt FUNCT_LAYER SPACE   	&lt SYMBOLS_LAYER SPACE  &lt ARROWS_LAYER ENTER  &lt F_KEYS_LAYER TAB
                        >;
                };
                russian_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &none    &mt LS(RU_YE) RU_YE  &mt LS(RU_TSE) RU_TSE  &mt LS(RU_Y) RU_Y  &mt LS(RU_K) RU_K   &mt LS(RU_E) RU_E   &mt LS(RU_N) RU_N   &mt LS(RU_G) RU_G   &mt LS(RU_SH) RU_SH &mt LS(RU_SHb) RU_SHb    &mt LS(RU_Z) RU_Z &none
   &none &mt LS(RU_F) RU_F &mt LS(RU_bl) RU_bl &mt LS(RU_V) RU_V &mt LS(RU_A) RU_A &mt LS(RU_P) RU_P   &mt LS(RU_R) RU_R &mt LS(RU_O) RU_O &mt LS(RU_L) RU_L &mt LS(RU_D) RU_D &mt LS(RU_ZH) RU_ZH &none
   &none  &mt LS(RU_YA) RU_YA       &mt LS(RU_CH) RU_CH       &mt LS(RU_C) RU_C       &mt LS(RU_M) RU_M       &mt LS(RU_I) RU_I         &mt LS(RU_T) RU_T   &mt LS(RU_B) RU_b   &mt LS(RU_B) RU_B &mt LS(RU_YU) RU_YU    &none &none
                                    &mv_to_layer DVORAK_LAYER     &trans       &kp SPACE      &kp RET  &trans   &kp RALT
                        >;
                };

				num_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &none &none &none &none &none &none   	&kp EQUAL &kp N7  &kp N8 &kp N9 &kp ASTERISK &none
   &none &none &none &none &none &none      &kp PLUS &kp N4 &kp N5  &kp N6 &kp SLASH &none
   &none &none &none &none &none &none      &kp MINUS &kp N1  &kp N2  &kp N3 &none &none
                        &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
                        >;
                };

				functional_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &none &none &none &none &none &none   	&kp LC(Y) &kp HOME  &kp END &kp CAPS &kp ESC &none
   &none &none &none &none &none &none      &kp LC(Z) &kp LC(C) &kp LC(V)  &kp LC(X) &none &none
   &none &none &none &none &none &none      &caps_word &kp PAGE_UP  &kp PAGE_DOWN  &kp INSERT &none &none
                        &none &none   &none   &none   &none    &none
                        >;
                };

				f_keys_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &none &kp F4 &kp F3 &kp F2 &kp F1 &kp LG(LS(S))   	&none &none  &none &none &none &none
   &none &kp F8 &kp F7 &kp F6 &kp F5 &kp LA(TAB)      &none &none &none  &none &none &none
   &none &kp F12 &kp F11 &kp F10 &kp F9 &none      &none &none  &none  &none &none &none
                        &none &none   &none   &none   &none    &none
                        >;
                };

				symbols_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &none &kp EXCL &kp LPAR &kp RPAR &mt LBKT LBRC &mt RBKT RBRC   	&none &none  &none &none &none &none
   &none &kp QMARK &kp BACKSLASH &kp PIPE &kp UNDERSCORE &kp COLON      &none &none &none  &none &none &none
   &none &kp TILDE &kp HASH &kp AT_SIGN &kp PERCENT &kp AMPERSAND      &none &none  &none  &none &none &none
                        &none &kp COMMA   &kp DQT   &none   &none    &none
                        >;
                };

				arrows_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &none &kp F4 &kp F3 &kp F2 &kp F1 &kp LG(LS(S))   	&none &none  &none &none &none &none
   &none &kp F8 &kp F7 &kp F6 &kp F5 &kp LA(TAB)      &none &none &none  &none &none &none
   &none &kp F12 &kp F11 &kp F10 &kp F9 &none      &none &none  &none  &none &none &none
                        &none &none   &none   &none   &none    &none
                        >;
                };
        };
};
